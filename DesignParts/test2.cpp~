class COperation
{
	public:
		double m_nFirst;
		double m_nSecond;

		COperation(double a, double b)
			: m_nFirst(a), m_nSecond(b)
		{  }
		virtual double GetResult()
		{
			return 0;
		}
};

class AddOperation : public COperation
{
	public:
		AddOperation(double a, double b)
			: COperation(a, b)
		{  }
		virtual double GetResult()
		{
			return m_nFirst + m_nSecond;
		}
};

class SubOperation : public COperation
{
	public:
		SubOperation(double a, double b)
			: COperation(a, b)
		{  }
		virtual double GetResult()
		{
			return m_nFirst - m_nSecond;
		}
};

class Context
{
	private:
		COperation* op;

	public:
		Context(double a, double b, char c)
		{
			switch(c)
			{
				case '+':
					op = new AddOperation(a, b);
					break;
				case '-':
					op = new SubOperation(a, b);
					break;
				default:
					op = new COperation(a, b);
					break;
			}
		}
		double GetResult()
		{
			return op->GetResult();
		}
};

int main(int argc, const char *argv[])
{
	double a, b;
	char c;
	cout << "Enter two integer: ";
	cin >> a >> b;
	cout << "Enter an operator: ";
	cin >> c;
	Context* pct = new Context(a, b, c);
	cout << "The result : " << pct->GetResult();
	return 0;
}
